KAFKA基本概念介绍
~~~~~~~~~~~~~~~~~~~~~
依据官网的描述，kafka是一个分布式流处理平台，那么什么是分布式流处理平台？

一个流处理平台，至少包括3个主要的功能：
1. 类似于消息队列系统，可以实现流数据的发布(publish)和订阅(subscribe)功能。
2. 能够对流数据提供高容错的持久化存储功能。
3. 能够实时处理流数据。

KAFKA一般应用于如下两种场景:
1. 构建实时流处理管道，可靠的实现系统或应用之间的数据流通。
2. 构建实时流处理应用，能够对流数据进行处理和响应。

为了更好的了解KAFKA，首先需要了解一些基本的概念。
1. KAFKA是可以运行在一个或者多个服务器上的集群应用，这些服务器可以跨数据中心部署。
2. KAFKA是按照归类存储流数据记录。该归类称之为topic。
3. 每一条记录由一个键、一个值和一个时间戳构成。

同时，KAFKA自身提供4类主要的API接口。

.. image::./image/kafka/kafka-apis.png

1. `Producer API` 该API允许应用程序向一个或多个KAFKA主题发布流数据。
2. `Consumer API` 该API允许应用程序订阅一个或者多个主题，并处理流数据。
3. `Streams API` 允许应用程序充当流处理器，使用来自一个或多个主题的输入流，并生成一个输出流到一个或多个输出主题，从而有效地将输入流转换为输出流。
4. `Connector API` 允许构建和运行将Kafka主题连接到现有应用程序或数据系统的可重用生产者或消费者。例如，连接到关系数据库的连接器可能捕获对表的每个更改。

在KAFKA应用中，客户端和服务器之间的通信是通过一个简单的、高性能的、与语言无关的TCP协议完成的。该协议是经过版本控制的，并与旧版本保持向后兼容性。官方为我们提供了一个Java客户机，但是客户机可以使用多种语言。



主题和日志
----------

深入了解KAFKA，首先需要了解Topic的概念。

主题是发布记录的类别或提要名称。Kafka中的主题总是多订阅者;也就是说，主题可以有0个、1个或多个订阅写入主题的数据的使用者。
对于每个主题，Kafka集群都维护一个分区日志。如下图所示:
.. image::./kafka/log_anatomy.png
每个分区都是一个有序的、不可变的记录序列，这些记录被不断添加到结构化提交日志中。分区中的记录被分配一个顺序的id号，称为惟一标识分区中的每个记录的偏移量。
Kafka集群使用可配置的保留期可以持久地保存所有已发布的记录(不管它们是否已被消耗)。例如，如果保留策略被设置为两天，那么在发布记录后的两天内，记录是可用的，在这两天之后，记录将被丢弃以释放空间。Kafka的性能在数据大小方面实际上是恒定的，所以长时间存储数据不是问题。
.. image::./kafka/log_consumer.png
事实上，在每个使用者的基础上保留的唯一元数据是该使用者在日志中的偏移量或位置。这个偏移量由使用者控制:通常情况下，使用者在读取记录时将线性推进其偏移量，但实际上，由于位置由使用者控制，所以它可以按自己喜欢的任何顺序使用记录。例如，使用者可以重置到旧的偏移量来重新处理过去的数据，或者跳过到最近的记录，从“现在”开始消费。
这些特性的组合意味着Kafka的消费者非常方便使用，例如，用户可以使用官方提供的的命令行工具跟踪任何主题的内容，而无需更改任何现有使用者使用的内容。
日志中的分区有几个用途。首先，它们允许日志扩展到超出单个服务器存储限制的大小。每个单独的分区必须适合承载它的服务器，但是主题可能有许多分区，因此它可以处理任意数量的数据。其次，它们作为并行的单位，稍后我们会详细介绍。

分发:Distribution
-----------------

日志的分区分布在Kafka集群中的服务器上，每个服务器处理分区共享的数据和请求。为了容错，每个分区在可配置数量的服务器之间复制。

每个分区都有一个服务器充当“领导者”，以及零个或多个服务器充当“追随者”。leader处理分区的所有读和写请求，而follower则被动地复制leader。如果领导者失败了，一个追随者将自动成为新的领导者。每个服务器作为它的一些分区的领导者和其他分区的追随者，因此负载在集群中得到了很好的平衡。

异地备份Geo-Replication
-----------------------
Kafka MirrorMaker为集群提供地理复制支持。使用MirrorMaker，可以跨多个数据中心或云区域复制消息。用户可以在用于备份和恢复的主动/被动场景中使用它;或者在活动/活动场景中放置更接近用户的数据，或者支持数据局部性需求。

生产者Producers
---------------
生产者将数据发布到他们选择的主题。生产者负责选择要分配给主题中的哪个分区的记录。这可以以一种简单的循环方式来平衡负载，也可以根据某个语义分区函数(比如基于记录中的某个键)来完成。

消费者Consumers
---------------
使用者用使用者组名称给自己打上标签，发布到主题的每个记录都交付给每个订阅使用者组中的一个使用者实例。使用者实例可以位于单独的进程中，也可以位于单独的机器上。

系统保障Guarantees
------------------
KAFKA提供如下可靠性保障功能：
1. 生产者发送到特定主题分区的消息将按照发送的顺序追加。也就是说，如果记录M1由与记录M2相同的生产者发送，且首先发送M1，那么M1的偏移量将小于M2，并且出现在日志的前面。
2. 使用者实例按照存储在日志中的顺序查看记录。
3. 对于复制因子为N的主题，我们将容忍最多N-1个服务器故障，而不会丢失提交到日志中的任何记录。

KAFKA消息系统
-------------
传统的消息传递有两种模式:排队和发布-订阅。在队列中，使用者池可以从服务器读取数据，每条记录都被发送到其中一条;在发布-订阅中，记录被广播给所有消费者。这两种模式各有优缺点。排队的优点在于，它允许您将数据处理划分到多个使用者实例上，从而可以扩展处理。不幸的是，队列不是多订阅的——一旦一个进程读取了数据，它就消失了。发布-订阅允许您将数据广播到多个进程，但无法伸缩处理，因为每条消息都要发送到每个订阅者。
传统的消息队列最少提供两种消息模型，一种P2P，一种PUB/SUB，而Kafka并没有这么做，巧妙的，它提供了一个消费者组的概念，一个消息可以被多个消费者组消费，但是只能被一个消费者组里的一个消费者消费，这样当只有一个消费者组时就等同与P2P模型，当存在多个消费者组时就是PUB/SUB模型。
KAFKA的消费群体概念概括了这两个概念。与队列一样，使用者组允许您将处理划分为一组进程(使用者组的成员)。与发布-订阅一样，Kafka允许您向多个消费群体广播消息。

`具体可参考 <https://www.docker.com/pricing>`_.


.. image::./image/docker-diff-version.png



+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| 支持内容                                      | 社区版本   |        企业基础版本   |  企业标准版本  |    企业高级版本|
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| 容器引擎、编排、网络、安全Container engine    |            |                       |                |                |
| built in orchestration, networking, security  | Yes        | Yes                   | Yes            | Yes            |       
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Docker Certified Infrastructure, Plugins and  | No         | Yes                   | Yes            | Yes            |
| ISV Containers 认证的基础设施，插件以及ISV容器|            |                       |                |                |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Image Management                              | No         | No                    | Yes            | Yes            |
| private registry, caching (Windows and Linux) |            |                       |                |                |
| 镜像管理、私有注册服务                        |            |                       |                |                |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Docker数据中心(集成容器应用程序管理)          | No         | No                    | Yes            | Yes            |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Docker Datacenter Enhanced RBAC,              | No         | No                    | Yes            | Yes            |
| LDAP/AD support                               |            |                       |                |                |  
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Integrated secrets mgmt, image signing policy | No         | No                    | No             | No             |
|  (Windows and Linux)                          |            |                       |                |                |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Secure multi-tenancy with node-based isolation| No         | No                    | No             | Yes            | 
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Automated Image Promotion                     | No         | No                    | No             | Yes            |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| Image security scanning and continuous        |            |                       |                |                |
| vulnerability scanning (Windows and Linux)    | No         | No                    | No             | Yes            |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| LinuxVersion Business Critical PERNODE PERYEAR| 0          | $1,500 	             | $3,000 	      | $3,500	       |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| LinuxVersion Business Day PERNODE PERYEAR     | 0          | $750 	             | $1,500 	      | $2,000	       |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| WinSeVersion Business Critical PERNODE PERYEAR| 0          | N/A 	             | $1,500 	      | $2,000	       |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+
| WinSeVersion Business Day PERNODE PERYEAR     | 0          | N/A 	             | $750 	      | $1,250	       |
+-----------------------------------------------+------------+-----------------------+----------------+----------------+

.. Note::

   可以看出，商用产品的定价策略是按照节点、时间、以及操作系统版本进行定价。Linux版本相比较于Winserver版本要更贵一些。

支持的平台类型
--------------

Docker CE以及EE 版本均支持多个平台。可以在本地部署也支持云端部署。

支持平台如下：

DESKTOP

+------------------------+---------------------+-----------------------+----------------+
|  平台                  |  Docker CE x86_64   | Docker CE ARM 	       |  Docker EE     |
+------------------------+---------------------+-----------------------+----------------+
| Docker for Mac (macOS) | YES                 | No                    | No             |
+------------------------+---------------------+-----------------------+----------------+
| Docker for Win10       | YES                 | No                    | No             |
+------------------------+---------------------+-----------------------+----------------+

Cloud

+------------------------+---------------------+-----------------------+----------------+
|  平台                  |  Docker CE x86_64   | Docker CE ARM         |  Docker EE     |
+------------------------+---------------------+-----------------------+----------------+
| Amazon Web Services    | YES                 | No                    | YES            |
+------------------------+---------------------+-----------------------+----------------+
| Microsoft Azure        | YES                 | No                    | YES            |
+------------------------+---------------------+-----------------------+----------------+

操作系统支持

+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Platform               | Docker CE x86_64  | Docker CE ARM |  Docker CE ARM64| Docker CEIBMZ(s390x)|Docker EE x86_64|DockerEEIBMZ(s390x)|
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Centos                 | yes               | no            | no              | no                  | yes            | no                |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Debian                 | yes               | yes           | yes             | no                  | no             | no                |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Fedora                 | yes               | no            | no              | no                  | no             | no                |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| WinSer2016             | no                | no            | no              | no                  | yes            | no                |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| OracleLinux            | no                | no            | no              | no                  | yes            | no                |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Red Hat Enterprise     | no                | no            | no              | no                  | yes            | yes               |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| SUSE Linux Enterprise S| no                | no            | no              | no                  | yes            | yes               |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+
| Ubuntu                 | yes               | yes           | yes             | yes                 | yes            | yes               |
+------------------------+-------------------+---------------+-----------------+---------------------+----------------+-------------------+


.. Note::
   
   看支持平台表，Docker对Ubuntu的支持应该是最全面的。
